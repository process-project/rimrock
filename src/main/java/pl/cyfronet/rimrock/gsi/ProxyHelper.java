package pl.cyfronet.rimrock.gsi;

import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.globus.gsi.CredentialException;
import org.globus.gsi.OpenSSLKey;
import org.globus.gsi.X509Credential;
import org.globus.gsi.bc.BouncyCastleOpenSSLKey;
import org.globus.gsi.gssapi.GlobusGSSCredentialImpl;
import org.ietf.jgss.GSSCredential;
import org.ietf.jgss.GSSException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class ProxyHelper {
	private static final Logger log = LoggerFactory.getLogger(ProxyHelper.class);
	
	public String getUserLogin(String proxyValue) throws CredentialException {
		String dn = getX509Credential(proxyValue).getIssuer();
		Pattern pattern = Pattern.compile(".+,CN=(plg.*)(,.*$|$)");
		Matcher matcher = pattern.matcher(dn);
		
		if(matcher.matches()) {
			String login = matcher.group(1);
			log.debug("Extracted user login from certificate subject {} is {}", dn, login);
			return login;
		} else {
			throw new IllegalArgumentException("Could not extract user name from the supplied user proxy");
		}
	}
	
	public String decodeProxy(String proxy) {
		return new String(Base64.getDecoder().decode(proxy), Charset.forName("utf-8"));
	}

	public String encodeProxy(String proxy) {
		return Base64.getEncoder().encodeToString(proxy.replaceAll("\n", "\n").getBytes());
	}

	public void verify(String proxyValue) throws CredentialException {
		X509Credential globusCredential = getX509Credential(proxyValue);
		globusCredential.verify();
	}

	public GSSCredential getGssCredential(String proxyValue) throws CredentialException, GSSException {
		return new GlobusGSSCredentialImpl(getX509Credential(proxyValue), GSSCredential.INITIATE_ONLY);
	}
	
	private X509Credential getX509Credential(String proxyValue) throws CredentialException {
		try {
			//Until https://github.com/jglobus/JGlobus/issues/146 is fixed and released the following fix
			//needs to be used. It converts the PKCS#8 format generated by voms-proxy-init to a format
			//recognized by X509Credential.
			if(proxyValue.contains("BEGIN PRIVATE KEY")) {
				Pattern p = Pattern.compile("(.+)-----BEGIN PRIVATE KEY-----(.*)-----END PRIVATE KEY-----(.+)", Pattern.DOTALL);
				Matcher m = p.matcher(proxyValue);
				
				if(m.matches()) {
					String firstCert = m.group(1).trim();
					String key = m.group(2).trim();
					String secondCert = m.group(3).trim();
					key = key.replaceAll("\n", "");

					byte[] decoded = Base64.getDecoder().decode(key);
					PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(decoded);
					KeyFactory kf = KeyFactory.getInstance("RSA");
					PrivateKey privateKey = kf.generatePrivate(spec);
					OpenSSLKey openSSLKey = new BouncyCastleOpenSSLKey(privateKey);
					StringWriter writer = new StringWriter();
					openSSLKey.writeTo(writer);
					proxyValue = firstCert + "\n" + writer.toString() + "\n" + secondCert;
				}
			}
			
			return new X509Credential(new ByteArrayInputStream(proxyValue.getBytes()));
		} catch(Exception e) {
			throw new CredentialException("Could not load user proxy certificate", e);
		}
	}
}